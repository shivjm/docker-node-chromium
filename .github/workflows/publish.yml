name: Build and publish to Docker Hub

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: "0 1 */1 * *"       # 1:00 AM every day

env:
  IMAGE_NAME: "shivjm/node-chromium-alpine"
  DOCKER_REGISTRY:              # defaults to Hub

jobs:
  publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [8, 10, 12, 13]
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Pull existing version
        run: docker pull $IMAGE_NAME:${{ matrix.node }}
      - name: Save metadata
        run: |
          echo $IMAGE_NAME:${{ matrix.node }} > .node-based-image-name
          docker inspect $IMAGE_NAME:${{ matrix.node }} -f '{{.Id}}' \
            > .existing-image-hash
      - name: Build image
        run: |
          docker build -q . --build-arg NODE_VERSION=${{ matrix.node }} \
            --cache-from $IMAGE_NAME:${{ matrix.node }} \
            -t $(cat .node-based-image-name) \
            --label org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --progress plain
          docker inspect $IMAGE_NAME:${{ matrix.node }} -f '{{.Id}}' \
            > .new-image-hash
      - name: Push image
        if: "github.event_name != 'pull_request'"
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login \
            -u ${{ secrets.DOCKER_USERNAME }} $DOCKER_REGISTRY \
            --password-stdin
          export NODE_BASED_IMAGE_NAME=$(cat .node-based-image-name)
          export RAW_NODE_VERSION=$(docker run --rm -t \
            $NODE_BASED_IMAGE_NAME node --version)
          export NODE_VERSION=$(echo $RAW_NODE_VERSION | sed 's/^.//')
          export CHROMIUM_VERSION=$(docker run --rm -t \
            $NODE_BASED_IMAGE_NAME /usr/bin/chromium-browser --version \
            | cut -d ' ' -f 2)
          docker tag $NODE_BASED_IMAGE_NAME \
            $IMAGE_NAME:node${NODE_VERSION::-1}-chromium${CHROMIUM_VERSION}
          [[ $(cat .existing-image-hash) != $(cat .new-image-hash) ]] \
            && docker push $IMAGE_NAME
